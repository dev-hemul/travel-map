import mongoose from "mongoose";
import { Bot, InlineKeyboard } from "grammy";
import Support from "../model/Support.js";
import 'dotenv/config';

const DB_URL = process.env.DB_URL;
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = Number(process.env.ADMIN_ID);

if (!BOT_TOKEN) throw new Error("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env");
if (!ADMIN_ID) throw new Error("ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env");
if (!DB_URL) throw new Error("DB_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ .env");

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect(DB_URL)
  .then(() => console.log("MongoDB connected"))
  .catch(err => console.error("MongoDB connection error:", err));

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
const bot = new Bot(BOT_TOKEN);

// –û–±'—î–∫—Ç–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤
const userState = {};
const operatorChats = {};
const activeComplaints = {};
const COOLDOWN_MS = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω
const lastComplaintTime = {};

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.api.setMyCommands([
  { command: "start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
  { command: "complaints", description: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–∫–∞—Ä–≥–∏ (–æ–ø–µ—Ä–∞—Ç–æ—Ä)" },
  { command: "contact", description: "–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º" },
  { command: "help", description: "–î–æ–ø–æ–º–æ–≥–∞" },
]);

// –û–±—Ä–æ–±–∫–∞ /start
bot.command("start", async (ctx) => {
  await ctx.reply(
    "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —á–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
    {
      reply_markup: new InlineKeyboard()
        .text("üìù –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–∫–∞—Ä–≥—É", "send_complaint")
        .row()
        .text("üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", "contact_operator")
    }
  );
});

// –û–±—Ä–æ–±–∫–∞ /help
bot.command("help", async (ctx) => {
  await ctx.reply(
    `–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:
/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/complaints ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–∫–∞—Ä–≥–∏ (–æ–ø–µ—Ä–∞—Ç–æ—Ä)
/contact ‚Äî –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
/help ‚Äî –î–æ–ø–æ–º–æ–≥–∞`
  );
});

// –û–±—Ä–æ–±–∫–∞ /complaints (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
bot.command("complaints", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.");
  }

  const complaints = await Support.find({ status: 'pending' }).sort({ date: -1 }).limit(5);

  if (complaints.length === 0) {
    return ctx.reply("–ü–æ–∫–∏ –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö —Å–∫–∞—Ä–≥.");
  }

  for (const c of complaints) {
    const text = `üì¨ –ù–æ–≤–∞ —Å–∫–∞—Ä–≥–∞:\n\n` +
      `üìå –¢–µ–º–∞: ${c.subject}\n` +  // –í–∏–≤–æ–¥–∏–º–æ subject –∑–∞–º—ñ—Å—Ç—å text
      `üë§ –í—ñ–¥: ${c.name || "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"}${c.username ? ` (@${c.username})` : ''}\n` +
      `üÜî ID: ${c.userId}\n` +
      `üìÖ –î–∞—Ç–∞: ${c.date.toLocaleString()}`;
    
    activeComplaints[c._id] = { userId: c.userId, complaintId: c._id };
    
    await ctx.reply(
      text,
      {
        reply_markup: new InlineKeyboard()
          .text("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", `start_chat_${c._id}`)
          .text("–í–∏—Ä—ñ—à–∏—Ç–∏", `resolve_${c._id}`)
      }
    );
  }
});

// –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
bot.callbackQuery("cancel", async (ctx) => {
  const userId = ctx.from.id;
  delete userState[userId];
  if (operatorChats[userId]) delete operatorChats[userId];
  await ctx.reply("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", { reply_markup: { remove_keyboard: true } });
});

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–∫–∞—Ä–≥–∏
bot.callbackQuery("send_complaint", async (ctx) => {
  const userId = ctx.from.id;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω—É
  const lastTime = lastComplaintTime[userId] || 0;
  const now = Date.now();
  if (now - lastTime < COOLDOWN_MS) {
    const waitSec = Math.ceil((COOLDOWN_MS - (now - lastTime)) / 1000);
    await ctx.reply(`–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ ${waitSec} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–∫–∞—Ä–≥–æ—é.`);
    return;
  }

  userState[userId] = { step: "choose_category", data: {} };

  await ctx.reply(
    "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º–∏:",
    {
      reply_markup: new InlineKeyboard()
        .text("üßç –ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–æ—Ñ—ñ–ª–µ–º", "cat_profile")
        .row()
        .text("üìç –ü—Ä–æ–±–ª–µ–º–∞ –∑ –º—ñ—Ç–∫–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ", "cat_marker")
        .row()
        .text("üë• –ü—Ä–æ–±–ª–µ–º–∞ –∑ –¥—Ä—É–∑—è–º–∏", "cat_friends")
        .row()
        .text("üìù –Ü–Ω—à–µ", "cat_other")
        .row()
        .text("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "cancel")
    }
  );
});

// –í–∏—Ä—ñ—à–µ–Ω–Ω—è —Å–∫–∞—Ä–≥–∏ (–æ–ø–µ—Ä–∞—Ç–æ—Ä)
bot.callbackQuery(/^resolve_(.+)$/, async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.answerCallbackQuery({ text: "–í–∏ –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä." });

  const complaintId = ctx.match[1];
  await Support.findByIdAndUpdate(complaintId, { status: 'resolved' });
  
  // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∫–∞—Ä–≥
  for (const userId in activeComplaints) {
    if (activeComplaints[userId] === complaintId) {
      delete activeComplaints[userId];
      try {
        await bot.api.sendMessage(userId, "‚úÖ –í–∞—à–∞ —Å–∫–∞—Ä–≥–∞ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏—Ä—ñ—à–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.");
      } catch (e) {
        console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", e.message);
      }
      break;
    }
  }

  await ctx.reply("–°–∫–∞—Ä–≥—É –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏—Ä—ñ—à–µ–Ω—É.");
  await ctx.deleteMessage();
});

// –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∫–∞—Ä–≥–∏
bot.callbackQuery(/^cat_/, async (ctx) => {
  const userId = ctx.from.id;
  const state = userState[userId];

  if (!state || state.step !== "choose_category") {
    await ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ—é /start");
    return;
  }

  const choice = ctx.callbackQuery.data.split("_")[1];

  const typeMap = {
    profile: "–ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–æ—Ñ—ñ–ª–µ–º",
    marker: "–ü—Ä–æ–±–ª–µ–º–∞ –∑ –º—ñ—Ç–∫–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ",
    friends: "–ü—Ä–æ–±–ª–µ–º–∞ –∑ –¥—Ä—É–∑—è–º–∏",
    other: "–Ü–Ω—à–∞ –ø—Ä–æ–±–ª–µ–º–∞",
  };

  if (choice === "other") {
    state.step = "waiting_text";
    await ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ");
    return;
  }

  
  await saveComplaintAndNotify(ctx, typeMap[choice], typeMap[choice]);
  lastComplaintTime[userId] = Date.now();
  delete userState[userId];
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
bot.on("message:text", async (ctx) => {
  const userId = ctx.from.id;
  const state = userState[userId];

  if (state && state.step === "waiting_text") {
    await saveComplaintAndNotify(ctx, "–Ü–Ω—à–∞ –ø—Ä–æ–±–ª–µ–º–∞", ctx.message.text);
    lastComplaintTime[userId] = Date.now();
    delete userState[userId];
    return;
  }

  if (state && state.step === "replying") {
    const targetUserId = state.targetUserId;
    const text = ctx.message.text;
    try {
      await bot.api.sendMessage(targetUserId, `üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n\n${text}`);
      await ctx.reply("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.");
    } catch {
      await ctx.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞.");
    }
    return;
  }

  if (operatorChats[userId]) {
    const interlocutorId = operatorChats[userId];
    try {
      await bot.api.sendMessage(interlocutorId, `üìû –û–ø–µ—Ä–∞—Ç–æ—Ä: ${ctx.message.text}`);
      await ctx.reply("–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.");
    } catch {
      await ctx.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.");
    }
    return;
  }

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —á–∞—Ç—ñ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
  for (const opId in operatorChats) {
    if (operatorChats[opId] === userId) {
      try {
        await bot.api.sendMessage(Number(opId), `üìû –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${ctx.message.text}`);
        await ctx.reply("–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.");
      } catch {
        await ctx.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.");
      }
      return;
    }
  }
});

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫–∞—Ä–≥–∏ —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
async function saveComplaintAndNotify(ctx, subject, message = "") {
  try {
    const finalMessage = message || subject;

    const complaint = new Support({
      userId: ctx.from.id,
      username: ctx.from.username || "",
      name: ctx.from.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
      subject: subject,
      message: finalMessage,
    });
    
    const savedComplaint = await complaint.save();

    // –î–æ–¥–∞—î–º–æ —Å–∫–∞—Ä–≥—É –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö
    activeComplaints[savedComplaint._id] = {
      userId: ctx.from.id,
      complaintId: savedComplaint._id
    };

    await ctx.reply("–î—è–∫—É—î–º–æ! –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ‚úÖ", {
      reply_markup: { remove_keyboard: true }
    });

    const adminMessage = `üì¨ –ù–æ–≤–∞ —Å–∫–∞—Ä–≥–∞:\n\n` +
      `üìå –¢–µ–º–∞: ${subject}\n` +
      `üë§ –í—ñ–¥: ${ctx.from.first_name}${ctx.from.username ? ` (@${ctx.from.username})` : ''}\n` +
      `üÜî ID: ${ctx.from.id}\n\n` +
      `‚úâÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n${finalMessage}`;

    await bot.api.sendMessage(ADMIN_ID, adminMessage, {
      reply_markup: new InlineKeyboard()
        .text("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", `start_chat_${savedComplaint._id}`)  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π ID
        .text("–í–∏—Ä—ñ—à–∏—Ç–∏", `resolve_${savedComplaint._id}`)
    });

  } catch (e) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫–∞—Ä–≥–∏:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Å–∫–∞—Ä–≥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
}
// –ó–≤'—è–∑–æ–∫ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
bot.callbackQuery("contact_operator", async (ctx) => {
  const userId = ctx.from.id;

  if (operatorChats[userId]) {
    await ctx.reply("–í–∏ –≤–∂–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ —á–∞—Ç—ñ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.");
    return;
  }

  operatorChats[ADMIN_ID] = userId;
  operatorChats[userId] = ADMIN_ID;

  await ctx.reply("–í–∞—Å –∑'—î–¥–Ω–∞–Ω–æ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –í–∏ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.");
  await bot.api.sendMessage(ADMIN_ID, 
    `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${ctx.from.first_name}${ctx.from.username ? ` (@${ctx.from.username})` : ''} (ID: ${userId}) —Ö–æ—á–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.`,
    {
      reply_markup: new InlineKeyboard()
        .text("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç", `end_chat_${userId}`)
    }
  );
});

// –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ—á–∏–Ω–∞—î —á–∞—Ç
bot.callbackQuery(/^start_chat_(.+)$/, async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.answerCallbackQuery({ text: "–í–∏ –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä." });

  const complaintId = ctx.match[1];
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Å–∫–∞—Ä–≥–∞ –≤ activeComplaints
  if (!activeComplaints[complaintId]) {
    // –Ø–∫—â–æ –Ω–µ–º–∞—î, —à—É–∫–∞—î–º–æ –≤ –±–∞–∑—ñ
    const complaint = await Support.findById(complaintId);
    
    if (!complaint || complaint.status !== 'pending') {
      return ctx.answerCallbackQuery({ text: "–°–∫–∞—Ä–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –≤–∏—Ä—ñ—à–µ–Ω–∞" });
    }
    
    // –î–æ–¥–∞—î–º–æ –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö
    activeComplaints[complaintId] = {
      userId: complaint.userId,
      complaintId: complaint._id
    };
  }

  const complaintData = activeComplaints[complaintId];
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —á–∞—Ç
  operatorChats[ADMIN_ID] = complaintData.userId;
  operatorChats[complaintData.userId] = ADMIN_ID;
  userState[ADMIN_ID] = { step: "replying", targetUserId: complaintData.userId };

  try {
    await bot.api.sendMessage(
      complaintData.userId, 
      "üí¨ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É –∑ –≤–∞–º–∏."
    );
  } catch (e) {
    console.log("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", e.message);
  }

  await ctx.reply(
    `–í–∏ –ø–æ—á–∞–ª–∏ —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${complaintData.userId} –ø–æ —Å–∫–∞—Ä–∑—ñ #${complaintId}.`,
    {
      reply_markup: new InlineKeyboard()
        .text("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç", `end_chat_${complaintId}`)
    }
  );

  await ctx.deleteMessage();
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
bot.callbackQuery(/^end_chat_(.+)$/, async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return ctx.answerCallbackQuery({ text: "–í–∏ –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä." });

  const complaintId = ctx.match[1];
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∫–∞—Ä–≥—É
  const complaintData = activeComplaints[complaintId];
  
  if (!complaintData) {
    return ctx.reply("–°–∫–∞—Ä–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –≤–∏—Ä—ñ—à–µ–Ω–∞.");
  }

  try {
    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å–∫–∞—Ä–≥—É
    await Support.findByIdAndUpdate(complaintId, { status: 'resolved' });
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∫–∞—Ä–≥
    delete activeComplaints[complaintId];
    
    // –°–ø–æ–≤—ñ—â–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try {
      await bot.api.sendMessage(
        complaintData.userId, 
        "‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–≤ —á–∞—Ç. –í–∞—à–∞ —Å–∫–∞—Ä–≥–∞ –≤–∏—Ä—ñ—à–µ–Ω–∞."
      );
    } catch (e) {
      console.log("–ù–µ –≤–¥–∞–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", e.message);
    }

    await ctx.reply(`–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–∫–∞—Ä–≥–∞ #${complaintId} –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –≤–∏—Ä—ñ—à–µ–Ω–∞.`);
    await ctx.deleteMessage();

  } catch (e) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É —Å–∫–∞—Ä–≥–∏:", e);
    await ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É —Å–∫–∞—Ä–≥–∏.");
  }

  // –ó–∞–≤–µ—Ä—à—É—î–º–æ —á–∞—Ç
  delete operatorChats[ADMIN_ID];
  delete operatorChats[complaintData.userId];
  delete userState[ADMIN_ID];
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ");

// –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
process.once("SIGINT", () => bot.stop());
process.once("SIGTERM", () => bot.stop());